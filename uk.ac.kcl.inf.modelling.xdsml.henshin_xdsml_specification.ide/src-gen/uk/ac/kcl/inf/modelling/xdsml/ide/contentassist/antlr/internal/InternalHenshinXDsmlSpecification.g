/*
 * generated by Xtext 2.12.0
 */
grammar InternalHenshinXDsmlSpecification;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.modelling.xdsml.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.modelling.xdsml.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.modelling.xdsml.services.HenshinXDsmlSpecificationGrammarAccess;

}
@parser::members {
	private HenshinXDsmlSpecificationGrammarAccess grammarAccess;

	public void setGrammarAccess(HenshinXDsmlSpecificationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleHenshinXDsmlSpecification
entryRuleHenshinXDsmlSpecification
:
{ before(grammarAccess.getHenshinXDsmlSpecificationRule()); }
	 ruleHenshinXDsmlSpecification
{ after(grammarAccess.getHenshinXDsmlSpecificationRule()); } 
	 EOF 
;

// Rule HenshinXDsmlSpecification
ruleHenshinXDsmlSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getGroup()); }
		(rule__HenshinXDsmlSpecification__Group__0)
		{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group__0__Impl
	rule__HenshinXDsmlSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelKeyword_0()); }
	'metamodel'
	{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group__1__Impl
	rule__HenshinXDsmlSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getQuotationMarkKeyword_1()); }
	'"'
	{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getQuotationMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group__2__Impl
	rule__HenshinXDsmlSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelAssignment_2()); }
	(rule__HenshinXDsmlSpecification__MetamodelAssignment_2)
	{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group__3__Impl
	rule__HenshinXDsmlSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getQuotationMarkKeyword_3()); }
	'"'
	{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getQuotationMarkKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getGroup_4()); }
		(rule__HenshinXDsmlSpecification__Group_4__0)
		{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getGroup_4()); }
		(rule__HenshinXDsmlSpecification__Group_4__0)*
		{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HenshinXDsmlSpecification__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group_4__0__Impl
	rule__HenshinXDsmlSpecification__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getStepKeyword_4_0()); }
	'step'
	{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getStepKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HenshinXDsmlSpecification__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getUnitsAssignment_4_1()); }
	(rule__HenshinXDsmlSpecification__UnitsAssignment_4_1)
	{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getUnitsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HenshinXDsmlSpecification__MetamodelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelEPackageCrossReference_2_0()); }
		(
			{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelEPackageIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelEPackageIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getMetamodelEPackageCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HenshinXDsmlSpecification__UnitsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getUnitsUnitCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getHenshinXDsmlSpecificationAccess().getUnitsUnitIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getUnitsUnitIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getHenshinXDsmlSpecificationAccess().getUnitsUnitCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
